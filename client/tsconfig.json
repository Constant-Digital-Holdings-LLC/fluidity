{
    "compilerOptions": {
        "declaration": true,
        "declarationMap": true /* Enable incremental compilation */,
        "composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */,
        "target": "ES6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

        "lib": ["DOM", "ES6"],

        /* Modules */
        "module": "NodeNext" /* Specify what module code is generated. */,
        "rootDir": "./src" /* Specify the root folder within your source files. */,
        "moduleResolution": "NodeNext" /* Specify how TypeScript looks up a file from a given module specifier. */,
        "allowJs": false /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
        "sourceMap": true /* Create source map files for emitted JavaScript files. */,
        "outDir": "./dist" /* Specify an output folder for all emitted files. */,
        "removeComments": true /* Disable emitting comments. */,
        "declarationDir": "./dist" /* Specify the output directory for generated declaration files. */,
        "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
        "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
        "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

        /* Type Checking */
        "strict": true /* Enable all strict type-checking options. */,
        "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
        "strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
        "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
        "strictBindCallApply": true /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
        "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
        "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
        "useUnknownInCatchVariables": true /* Type catch clause variables as 'unknown' instead of 'any'. */,
        "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
        "noUnusedLocals": false /* Enable error reporting when a local variables aren't read. */,
        "noUnusedParameters": false /* Raise an error when a function parameter isn't read */,
        "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
        "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
        "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
        "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */,
        "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
        "noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type */,
        "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
        "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
        "skipLibCheck": false /* Skip type checking all .d.ts files. */
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules", "**/*.spec.ts", "dist/**/*"]
}
